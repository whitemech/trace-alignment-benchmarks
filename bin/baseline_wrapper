#!/usr/bin/env python3
import argparse
import tempfile
from pathlib import Path

from bin.utils import launch, BASELINE_DRIVER, ALGORITHMS, BASELINE_DIR


def plan(domain_path, problem_path, algorithm, working_dir):
    """Optimal Planning."""
    domain_path = str(Path(domain_path).absolute())
    problem_path = str(Path(problem_path).absolute())
    if working_dir:
        working_dir = Path(args.working_dir)
        working_dir.mkdir(exist_ok=True)
    else:
        working_dir = Path(tempfile.mkdtemp())
    planner_command = [f"{BASELINE_DRIVER}",
                       "--build=release64",
                       "--plan-file",
                       f"{BASELINE_DIR}/{tempfile.mkstemp()}",
                       str(domain_path),
                       str(problem_path),
                       "--search",
                       f"{algorithm}()",
                       ]

    print("Start planner")
    launch(planner_command, cwd=str(BASELINE_DIR))


if __name__ == '__main__':
    """
    Usage: python baseline_wrapper.py -d <DOMAIN-PATH> -p <PROBLEM-PATH> 
    """
    parser = argparse.ArgumentParser(description="Wrapper for the symbolic baseline planner.")
    parser.add_argument('-d', dest='domain_path', type=Path, required=True)
    parser.add_argument('-p', dest='problem_path', type=Path, required=True)
    parser.add_argument('-a', "--algorithm", dest='algorithm', type=str, choices=ALGORITHMS, default="sbd")
    parser.add_argument('--working-dir', dest='working_dir', type=str, default=None)
    args = parser.parse_args()

    domain_path = args.domain_path
    problem_path = args.problem_path
    algorithm = args.algorithm
    working_dir = args.working_dir

    plan(domain_path, problem_path, algorithm, working_dir)
