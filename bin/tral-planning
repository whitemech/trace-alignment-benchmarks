#!/usr/bin/env python3

import argparse
import datetime
import glob
import inspect
import os
import shutil
import statistics
import tempfile
from pathlib import Path
from tempfile import TemporaryDirectory

from bin.utils import ALGORITHMS, HEURISTICS, TRAL_JAR, launch, FD_WRAPPER_PATH, \
    SUPPORTED_PLANNERS, is_valid_file, ENCODINGS

DEFAULT_OUTPUT_DIR: str = "output"
BIN_DIR = Path(inspect.getframeinfo(inspect.currentframe()).filename).parent
REPO_ROOT = BIN_DIR.parent


def parse_args():
    """Parse command-line aurguments."""
    parser = argparse.ArgumentParser("tral-planning", description="A planner for Trace Alignment.")
    parser.add_argument('--log', dest='log_path', type=is_valid_file, required=True)
    parser.add_argument('--formulas', dest='formulas_path', type=is_valid_file, required=True)
    parser.add_argument('-e', "--encoding", dest='encoding', type=int, choices=ENCODINGS, default=0)
    parser.add_argument("--output-dir", type=str, default=DEFAULT_OUTPUT_DIR)
    parser.add_argument('-t', dest='planner', type=str, choices=SUPPORTED_PLANNERS, required=True)
    parser.add_argument('-a', "--algorithm", dest='algorithm', type=str, choices=ALGORITHMS, default="astar")
    parser.add_argument('--heuristic', dest='heuristic', type=str, choices=HEURISTICS, default="hmax")
    parser.add_argument('--working-dir', dest='working_dir', type=str, default=None)
    return parser.parse_args()


if __name__ == '__main__':
    args = parse_args()
    if args.working_dir:
        working_dir = Path(args.working_dir)
        working_dir.mkdir()
    else:
        working_dir = Path(tempfile.mkdtemp())

    start = datetime.datetime.now()

    output_dir = working_dir / DEFAULT_OUTPUT_DIR
    cli_args =[
        "java",
        "-Xmx4g",
        "-jar",
        str(TRAL_JAR),
        "--log", args.log_path,
        "--formulas", args.formulas_path,
        "--encoding", str(args.encoding),
        "--output", str(output_dir),]
    launch(cli_args)
    end_compilation = datetime.datetime.now()
    elapsed_time_compilation = (end_compilation.timestamp() - start.timestamp())
    print(f"Compilation time: {elapsed_time_compilation} seconds")

    end_tool_times = []

    if args.encoding < 4:
        for filepath in glob.iglob(f"{output_dir}/p*.pddl"):
            start_tool = datetime.datetime.now()
            cli_args = []
            if args.planner == "fd":
                cli_args = [str(FD_WRAPPER_PATH),
                            "-d", f"{output_dir}/domain-e{str(args.encoding)}.pddl",
                            "-p", str(filepath),
                            "-a", str(args.algorithm),
                            "--heuristic", str(args.heuristic),
                            "--working-dir", str(working_dir)]
            else:
                raise ValueError
            launch(cli_args)
            end_tool = datetime.datetime.now()
            end_tool_time = end_tool - start_tool
            end_tool_times.append(end_tool_time.total_seconds())
            print(f"Tool time: {end_tool_time.total_seconds()} seconds")
        elapsed = end_tool - start
        print(f"Total time: {elapsed.total_seconds()} seconds")
        print(f"Average Tool time: {statistics.mean(end_tool_times)} seconds")
    else:
        assert args.encoding == 4, "Encoding not supported!"
        for i in range(0, len(os.listdir(output_dir)) // 2):
            start_tool = datetime.datetime.now()
            cli_args = []
            if args.planner == "fd":
                cli_args = [str(FD_WRAPPER_PATH),
                            "-d", f"{output_dir}/domain-{str(i)}.pddl",
                            "-p", f"{output_dir}/p-{str(i)}.pddl",
                            "-a", str(args.algorithm),
                            "--heuristic", str(args.heuristic),
                            "--working-dir", str(working_dir)]
            else:
                raise ValueError
            launch(cli_args)
            end_tool = datetime.datetime.now()
            end_tool_time = end_tool - start_tool
            end_tool_times.append(end_tool_time.total_seconds())
            print(f"Tool time: {end_tool_time.total_seconds()} seconds")
        elapsed = end_tool - start
        print(f"Total time: {elapsed.total_seconds()} seconds")
        print(f"Average Tool time: {statistics.mean(end_tool_times)} seconds")