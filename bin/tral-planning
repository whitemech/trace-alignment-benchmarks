#!/usr/bin/env python3

import argparse
import datetime
import glob
import inspect
import os
import tempfile
from pathlib import Path

from bin.utils import ALGORITHMS, HEURISTICS, TRAL_JAR, launch, FD_WRAPPER_PATH, \
    SUPPORTED_PLANNERS, is_valid_file, ENCODINGS, SYMBA_WRAPPER_PATH

DEFAULT_OUTPUT_DIR: str = "output"
BIN_DIR = Path(inspect.getframeinfo(inspect.currentframe()).filename).parent
REPO_ROOT = BIN_DIR.parent


def parse_args():
    """Parse command-line aurguments."""
    parser = argparse.ArgumentParser("tral-planning", description="A planner for Trace Alignment.")
    parser.add_argument('--log', dest='log_path', type=is_valid_file, required=True)
    parser.add_argument('--formulas', dest='formulas_path', type=is_valid_file, required=True)
    parser.add_argument('-e', "--encoding", dest='encoding', type=int, choices=ENCODINGS, default=0)
    parser.add_argument("--output-dir", type=str, default=DEFAULT_OUTPUT_DIR)
    parser.add_argument('-t', dest='planner', type=str, choices=SUPPORTED_PLANNERS, required=True)
    parser.add_argument('-a', "--algorithm", dest='algorithm', type=str, choices=ALGORITHMS, default="astar")
    parser.add_argument('--heuristic', dest='heuristic', type=str, choices=HEURISTICS, default="blind")
    parser.add_argument('--working-dir', dest='working_dir', type=str, default=None)
    return parser.parse_args()


if __name__ == '__main__':
    args = parse_args()
    if args.working_dir:
        working_dir = Path(args.working_dir)
        working_dir.mkdir()
    else:
        working_dir = Path(tempfile.mkdtemp())

    start = datetime.datetime.now()

    output_dir = working_dir / DEFAULT_OUTPUT_DIR
    cli_args =[
        # "/home/francesco/.sdkman/candidates/java/current/bin/java",
        "java",
        "-Xmx4g",
        "-jar",
        str(TRAL_JAR),
        "--log", args.log_path,
        "--formulas", args.formulas_path,
        "--encoding", str(args.encoding),
        "--output", str(output_dir),]
    launch(cli_args)
    end_compilation = datetime.datetime.now()
    elapsed_time_compilation = (end_compilation.timestamp() - start.timestamp())
    print(f"Compilation time: {elapsed_time_compilation} seconds")

    if args.encoding < 4:
        for filepath in glob.iglob(f"{output_dir}/p*.pddl"):
            cli_args = []
            if args.planner == "fd":
                cli_args = [str(FD_WRAPPER_PATH),
                            "-d", f"{output_dir}/domain-e{str(args.encoding)}.pddl",
                            "-p", str(filepath),
                            "-a", str(args.algorithm),
                            "--heuristic", str(args.heuristic),
                            "--working-dir", str(working_dir)]
            elif args.planner == "symba":
                cli_args = [str(SYMBA_WRAPPER_PATH),
                            "-d", f"{output_dir}/domain-e{str(args.encoding)}.pddl",
                            "-p", str(filepath),
                            "--working-dir", str(working_dir)]
            else:
                raise ValueError
            start_tool = datetime.datetime.now()
            launch(cli_args)
            end_tool = datetime.datetime.now()
    else:
        assert args.encoding == 4, "Encoding not supported!"
        for i in range(0, len(os.listdir(output_dir)) // 2):
            cli_args = []
            if args.planner == "fd":
                cli_args = [str(FD_WRAPPER_PATH),
                            "-d", f"{output_dir}/domain-{str(i)}.pddl",
                            "-p", f"{output_dir}/p-{str(i)}.pddl",
                            "-a", str(args.algorithm),
                            "--heuristic", str(args.heuristic),
                            "--working-dir", str(working_dir)]
            elif args.planner == "symba":
                cli_args = [str(SYMBA_WRAPPER_PATH),
                            "-d", f"{output_dir}/domain-{str(i)}.pddl",
                            "-p", f"{output_dir}/p-{str(i)}.pddl",
                            "--working-dir", str(working_dir)]
            else:
                raise ValueError
            start_tool = datetime.datetime.now()
            launch(cli_args)
            end_tool = datetime.datetime.now()
    elapsed = end_tool - start
    print(f"Total cumulated time: {elapsed.total_seconds()} seconds")
